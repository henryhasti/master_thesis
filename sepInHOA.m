%% Editable section%%%%%%%%
mixture_wavname = '/home/hhasti/Documents/Research/Data/4srcSimWavs/azcase_1_rev_2000_song_1.wav';
results_dir = '/home/hhasti/Documents/Research/results/'; % Results folder
%%%%%%%%%%%%%%%%%%%%%%%%%%%

% Henry edited. Now implements setup in source sep in HOA paper for 4
% sources given in mixture wavname

% This is an example of script for source separation of 3 tracks (drums, voice 
% and piano) from an instantaneous mixtures.
% 
% Parameters used to initialize FASST in this example:
% * Mixture type : instantaneous.
% * Time-Frequency representation : STFT with 1024 frequency bins.
% * Source paramater Wex : Normally distributed random matrix (default init).
% * Source paramater Hex : Normally distributed random matrix (default init).
% * Source paramater A : balanced gains (left, middle, right)
% * Source paramater adaptability : free, all previous parameters are
%   updated during the iterative EM process.
% * Number of EM iterations : 200
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Copyright 2018 Ewen Camberlein (INRIA), Romain Lebarbenchon (INRIA)
% This software is distributed under the terms of the GNU Public License
% version 3 (http://www.gnu.org/licenses/gpl.txt)
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% Cleaning
clear data;
clear sources;

%% ------------------------------------------------------------------------
%                      Paths management
%--------------------------------------------------------------------------

% Add FASST directory to PATH
fasst_matlab_dir = '@FASST_MATLAB_DIR@';
if ~exist('fasst_writeXML', 'file')
    addpath(fasst_matlab_dir);
end

%create necessary folders
tmp_dir    = 'temp/';     % Temporary folder (intermediate files generated by FASST)

if ~exist(results_dir, 'dir')
    mkdir(results_dir);
end
if ~exist(tmp_dir, 'dir')
    mkdir(tmp_dir);
end

%% ------------------------------------------------------------------------
%                   Mixture and audio scene information
%--------------------------------------------------------------------------

x_mix = sh_sigs; %audioread(mixture_wavname);

% Number of sources
J = 4; 

% Mixture number of samples and number of channels (I)
[nbSamples_Mix,I] = size(x_mix);

%% ------------------------------------------------------------------------
%            FASST Initialization (compute input xml file)
%--------------------------------------------------------------------------

disp('> FASST initialization');

% --- FASST general configuration (direct inputs for FASST)

transformType     = 'STFT';  % Time-frequency transform
wlen              = 3072;    % Window length in samples (frame length in time domain) - should be multiple of 4 for STFT
Niteration_EM     = 150;     % Number of iteration of EM algorithm for sources models estimation

% --- Initialization of models and FASST specific parameters for each source

% Define necessary parameters
N    = ceil(nbSamples_Mix/wlen*2); % Number of frames
nbin = wlen/2 +1;                  % Number of frequency bins for STFT
K    = 16;                          % NFM rank (number of spectral patterns in the dictionary)

sources=[];
% Set common parameters for sources models
for j = 1:J
    % Name of output audio file for source j
    sources{j}.name = ['EstimatedSource_',num2str(j)];
    
    % Type of mixture
    sources{j}.A.mixingType = 'inst';   % Instantaneous mixture
    
    % Spatial model adaptability
    sources{j}.A.adaptability = 'free'; % Will be adapted by FASST
    
    % Spectral patterns (Wex) and time activation patterns applied to spectral patterns (Hex)   
    % Adaptability of models
    sources{j}.Wex.adaptability = 'free'; % Will be adapted by FASST
    sources{j}.Hex.adaptability = 'free'; % Will be adapted by FASST
    
    % Initialization of models
    sources{j}.Wex.data = 0.75 * abs(randn(nbin, K)) + 0.25 * ones(nbin, K);
    sources{j}.Hex.data = 0.75 * abs(randn(K, N)) + 0.25 * ones(K, N);
    
    % Wiener filter parameters   
    sources{j}.wiener.a  = 0;    % a  : Over-substraction parameter (in dB) - Default value = 0 
    sources{j}.wiener.b  = 0;    % b  : Phase ponderation parameter (inside [0,1]) - Default value = 0 
    sources{j}.wiener.c1 = 0;    % c1 : Half-time width of the covariance smoothing window ( c1 >= 0)- Default value = 0 
    sources{j}.wiener.c2 = 0;    % c2 : Half-frequency width of the covariance smoothing window ( c2 >= 0)- Default value = 0 
    sources{j}.wiener.d  = -Inf; % d  : Thresholding parameter ( in dB, d <= 0)- Default value = -Inf 
end

% Set specific initialization parameters for sources models (spatial 
% initialization ~ init gain balance for each source for instantaneous mixture)
sources{1}.A.data = [1;sqrt(3)*sin(el2pol(realDOA(2,1)))*sin(realDOA(1,1));sqrt(3)*cos(el2pol(realDOA(2,1)));sqrt(3)*sin(el2pol(realDOA(2,1)))*cos(realDOA(1,1))];
sources{2}.A.data = [1;sqrt(3)*sin(el2pol(realDOA(2,2)))*sin(realDOA(1,2));sqrt(3)*cos(el2pol(realDOA(2,2)));sqrt(3)*sin(el2pol(realDOA(2,2)))*cos(realDOA(1,2))];
sources{3}.A.data = [1;sqrt(3)*sin(el2pol(realDOA(2,3)))*sin(realDOA(1,3));sqrt(3)*cos(el2pol(realDOA(2,3)));sqrt(3)*sin(el2pol(realDOA(2,3)))*cos(realDOA(1,3))];
sources{4}.A.data = [1;sqrt(3)*sin(el2pol(realDOA(2,4)))*sin(realDOA(1,4));sqrt(3)*cos(el2pol(realDOA(2,4)));sqrt(3)*sin(el2pol(realDOA(2,4)))*cos(realDOA(1,4))];

% --- Write FASST_data structure in FASST input xml file

% Define FASST data structure
FASST_data.tfr_type   = transformType;
FASST_data.wlen       = wlen;
FASST_data.iterations = Niteration_EM;
FASST_data.sources    = sources;

% Write parameters to XML
xml_fname = [tmp_dir 'sources.xml'];
fasst_writeXML(xml_fname, FASST_data);

%% ------------------------------------------------------------------------
%                         Call FASST binaries
%--------------------------------------------------------------------------

disp('> FASST execution');

disp('>> Input time-frequency representation');
fasst_compute_mixture_covariance_matrix(mixture_wavname, xml_fname, tmp_dir)

disp('>> Refinement of sources models (EM algorithm)');
fasst_estimate_source_parameters(xml_fname, tmp_dir, [xml_fname '.new'])

disp('>> Computation of estimated sources');
fasst_estimate_sources(mixture_wavname, [xml_fname '.new'],tmp_dir, results_dir)

% Delete temporary folder
rmdir(tmp_dir,'s')
